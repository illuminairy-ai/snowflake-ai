# version 0.5.0
# all keys should be in lower case
# use '_' to concat multi_words
# avoid more than 3-level deep of overall config, use "app_short_name" for reference to group_key.app_name
# within a particular section, make sure there are 2-level config reference

[apps]
  type = "streamlit"
  root_path = "~/"

  [apps.group_def]
  name = "AI Application Default Group"
  version = "0.5.0"

    [apps.group_def.app1]
    app_short_name = "group0_app1" # used for reference to the app without '.' scope
    type = "notebook"
    name = "Group 0 App 1"
    version = "0.5.0"
    domain_env = "pov"
    app_path = "apps/group0/app1/"
    script_home = "apps/group0/app1/" # app home script directory



[base_apps]

  [base_apps.group_def]

    [base_apps.group_def.app1]
    # make sure there are 2-level config reference
    app_connects = [
        "oauth_connects.client_creds_group0_app1", 
        "data_connects.snflk_oauth_cc_group0_app1"
    ]

    # make sure there are 2-level config reference
    ml_ops = ["pipeline_flows.group0_app1"] # flows, registry, etc.

    # these might be included for ml_ops in the future release
    data_setups = ["group_def.app1"]
    ml_pipelines = ["group_def.app1"]



[streamlit_apps]

  [streamlit_apps.group_def.app1]

    [streamlit_apps.group_def.app1.global]
    dataFrameSerialization = "arrow"
    level = "info"

    [streamlit_apps.group_def.app1.server]
    headless = true
    port = 8501
    enableCORS = false
    enableStaticServing = true

    [streamlit_apps.group_def.app1.theme]
    primaryColor = "#1D8CCC"
    backgroundColor = "#FFFFFF"
    secondaryBackgroundColor = "#F0F2F6"
    textColor = "#262730"
    font = "sans serif"



[app_connects]

  [app_connects.oauth_connects]
  init_list = ["auth_code_group0_app1"]

    [app_connects.oauth_connects.auth_code_group0_app1]
    auth_type = "oauth"
    type = "auth_code"
    content_type = "application/x-www-form-urlencoded"
    auth_request_url = ""
    tenant_id = ""
    client_id = ""
    redirect_uri = ""
    scope = ""
    auth_response_type = "code"
    code_challenge_method = "S256"
    auth_response_mode = "query" # form_post
    auth_response_fields = ["code", "state"]
    auth_response_errors = ["error", "error_description"]
    grant_token_request_url = ""
    grant_type = "authorization_code"
    client_secret_env = "SNOWFLAKE_DEFAULT_APP_SECRET"
    grant_token_response_fields = ["access_token", "token_type", "expires_in", "scope", "referesh_token", "id_token"]
    verify_signature = false

    [app_connects.oauth_connects.device_code_group0_app1]
    auth_type = "oauth"
    type = "divice_code"
    auth_request_url = ""
    tenant_id = ""
    content_type = "application/x-www-form-urlencoded"
    client_id = ""
    scope = ""
    auth_response_fields = ["device_code", "user_code", "verification_uri", "interval", "expires_in"]
    grant_token_request_url = ""
    grant_type = "urn:ietf:params:oauth:grant-type:device_code"

    [app_connects.oauth_connects.client_creds_group0_app1]
    auth_type = "oauth"
    type = "client_credentials"
    content_type = "application/x-www-form-urlencoded"
    grant_token_request_url = "https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token"
    tenant_id = ""
    client_id = ""
    client_secret_env = "SNOWFLAKE_DEFAULT_APP_SECRET"
    scope = ""
    grant_response_fields = ["access_token", "token_type", "expires_in"]
    grant_type = "client_credentials"


  [app_connects.data_connects]
  init_list = ["snflk_oauth_cc_group0_app1"]

    [app_connects.data_connects.snflk_svc_group0_app1]
    type = "snowflake"
    name = "snowflake service default"

    auth_type = "keypair"
    account = ""
    region = ""
    user = ""
    password_env = "SNOWSQL_PWD"
    role=""
    warehouse = ""  
    database = ""
    schema = ""  # optional
    private_key_phrase_env = "SNOWFLAKE_USER_PRIVATE_KEY_PASSPHRASE"
    private_key_path_env = "SNOWFLAKE_USER_PRIVATE_KEY_PATH"

    [app_connects.data_connects.snflk_oauth_group0_app1]
    type = "snowflake"
    name = "snowflake oauth"
    auth_type = "oauth"
	oauth_connect = "oauth_connects.device_code_group0_app1"
    account = ""
    region = ""
    user = "" 
    database = "" 
    schema = ""  # optional
    warehouse = ""
    role = "" 

    [app_connects.data_connects.snflk_oauth_cc_group0_app1]
    type = "snowflake"
    name = "snowflake oauth"
    auth_type = "oauth"
	oauth_connect = "oauth_connects.client_creds_group0_app1"
    account = ""
    user = "" 
    database = "" 
    schema = ""  
    warehouse = "" 
    role = ""  

    [app_connects.data_connects.snflk_oauth_app2]
    type = "snowflake"
    name = "snowflake interactive"
    auth_type = "externalbrowser"
    account = ""
    region = ""
    user = ""
    role = "" 
    warehouse = "" 
    database = "" 
    schema = "" 

    [app_connects.data_connects.file_def]
    type = "file"
    name = "default local csv"
    format = "csv"
    storage_type = "local" # azure_adls, azure_blob
    dir_path = "../../"
    file_name = ""



[ml_ops]

	[ml_ops.pipeline_flows.group0_app1]
    type = "snowflake"
    data_connect = "data_connects.snflk_oauth_cc_group0_app1"
    model_registry = "model_registries.group0_app1"
	feature_store = "feature_stores.group0_app1"
	
    execution_mode = "sequential" # "sequential", "parallelable"
    ml_pipelines = []
    data_setups = []


    [ml_ops.model_registries.group0_app1]
    type = "snowflake"
    data_connect = "data_connects.snflk_oauth_cc_group0_app1"
    registry_table = ""
	
	
    [ml_ops.feature_stores.group0_app1]
    type = "snowflake"
    data_connect = "data_connects.snflk_oauth_cc_group0_app1"



[data_setups]

  [data_setups.group_def]

    [data_setups.group_def.app1]
    type = "snowflake"
    domain_env = "pov"
    data_connect = "data_connects.snflk_oauth_cc_group0_app1"
    script = "app_setup.py"
	class = ""
	init = ""
	clean_up = ""



[ml_pipelines]

    [ml_pipelines.group_def.app1]
    type = "default" # default | prepect | airflow | kubeflow | prepect-mlflow
    script = "def_pipeline.py"
    class = ""
    run = "run"
  
    step_tasks = [ ]
    # allowed task_types:
    # "setup", "ingest", "preprocess", "premodel", "pretrain", "prepdata", 
    # "prepmodel", "learn", "train", "validate", "finetune", "test", 
    # "predict", "postprocess", "evaluate", "deploy", "serve", "feedback",
    # "monitor", "retrain", "custom", "cleanup"
 
